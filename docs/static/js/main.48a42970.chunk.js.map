{"version":3,"sources":["components/MapLayer/MapLayer.js","components/MapView/MapView.js","components/SelectList/SelectList.js","App.js","index.js"],"names":["L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","MapLayer","leafletRef","React","createRef","prevProps","data","this","props","current","leafletElement","clearLayers","addData","feature","layer","popupContent","properties","centro","tipocentro","titularida","bindPopup","GeoJSON","onEachFeature","ref","Component","MapView","state","geodata","BaseLayer","LayersControl","Overlay","Map","style","center","coordCenter","zoom","position","checked","name","TileLayer","attribution","url","WMSTileLayer","layers","SelectList","municipalities","selectCoord","selectListChange","e","target","value","setState","className","onChange","map","m","key","id","coordinates","code","disabled","onClick","munipalityChange","bind","App","aData","split","munipalityName","getWFSData","URL","fetch","res","json","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48a42970.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { GeoJSON } from 'react-leaflet';\nimport L from 'leaflet';\n\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\nexport default class MapLayer extends Component {\n\n    leafletRef = React.createRef();\n\n    componentWillReceiveProps(prevProps) {\n        if (prevProps.data !== this.props.data) {\n            this.leafletRef.current.leafletElement.clearLayers();\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.data !== this.props.data) {\n            this.leafletRef.current.leafletElement.addData(this.props.data);\n        }\n    }\n\n    onEachFeature(feature, layer) {\n        const popupContent = `<Popup>\n                                    <pre>Centro: ${feature.properties.centro}</pre>\n                                    <pre>Tipo: ${feature.properties.tipocentro}</pre>\n                                    <pre>Titularidad: ${feature.properties.titularida}</pre>\n                                </Popup>`\n        layer.bindPopup(popupContent)\n    }\n\n    render() {\n        return <GeoJSON\n        data = { this.props.data }\n        onEachFeature = { this.onEachFeature }\n        ref = { this.leafletRef }\n        />\n    }\n}","import React from \"react\";\nimport { Map, TileLayer, WMSTileLayer, LayersControl } from \"react-leaflet\";\nimport MapLayer from '../MapLayer/MapLayer'\nimport \"leaflet/dist/leaflet.css\";\n\nexport default class MapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      geodata: ''\n    };\n  }\n\n  render() {\n    const styleMap = { \"width\": \"100%\", \"height\": \"60vh\" }\n    const { BaseLayer, Overlay } = LayersControl\n\n    return (\n      <div>\n        <Map\n          style={styleMap}\n          center={this.props.coordCenter}\n          zoom={this.props.zoom}>\n\n          <LayersControl position=\"topright\">\n\n            <BaseLayer checked name=\"OpenStreetMap\">\n              <TileLayer\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n              />\n            </BaseLayer>\n\n            <BaseLayer name=\"PNOA\">\n              <WMSTileLayer\n                layers={'OI.OrthoimageCoverage'}\n                attribution='&copy; <a href=\"http://osm.org/copyright\">IGN</a>'\n                url=\"http://www.ign.es/wms-inspire/pnoa-ma?\"\n              />\n            </BaseLayer>\n\n            <Overlay checked name=\"Servicios Sanitarios (DERA)\">\n              <MapLayer data={this.props.geodata} />\n            </Overlay>\n\n          </LayersControl>\n\n        </Map>\n      </div>\n    )\n\n  }\n\n}\n\n","import React from 'react'\nimport municipalities from './data/ municipalities.json'\n\nexport default class SelectList extends React.Component {\n\n    state = {\n        data: municipalities,\n        selectCoord: '',\n    }\n\n    selectListChange = (e) => {\n        if (e.target.value) {\n            this.setState({\n                selectCoord: e.target.value,\n            });\n        }\n    }\n\n    render() {\n        const { data } = this.state;\n        return (\n            <div>\n                <label>Municipality</label>\n                <select className=\"form-control\" onChange={this.selectListChange}>\n                    <option value=\"\">Select one...</option>\n                    {data.map((m) =>\n                        <option key={m.id} value={[m.coordinates, m.name, m.code]}>{m.name}</option>\n                    )}\n                </select>\n                <button className=\"btn btn-primary mt-3 mb-3\"\n                    disabled={!this.state.selectCoord}\n                    onClick={this.props.munipalityChange.bind(this, this.state.selectCoord)}>\n                    Load</button>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport MapView from './components/MapView/MapView'\nimport SelectList from './components/SelectList/SelectList';\n\nimport './App.css';\n\nexport default class App extends React.Component {\n\n  constructor() {\n    super()\n    this.state = {\n      coordCenter: [37.885963680860755, -4.774589538574219],\n      munipalityName: '',\n      zoom: 9,\n      geodata: [],\n      code: ''\n    }\n    this.munipalityChange = this.munipalityChange.bind(this)\n  }\n\n  async getWFSData(code) {\n    const URL = `http://www.ideandalucia.es/dea100/wfs?service=WFS&version=1.1.0&request=GetFeature&typename=dea100:sv03_sas&MAXFEATURES=10&outputFormat=application/json&filter=<Filter><PropertyIsEqualTo><PropertyName>codmun</PropertyName><Literal>${code}</Literal></PropertyIsEqualTo></Filter>&SRSNAME=EPSG:4326`\n    const res = await fetch(URL)\n    const data = await res.json();\n    this.setState({\n      geodata: data\n    })\n  }\n\n  munipalityChange = (data) => {\n    let aData = data.split(',')\n    this.setState({\n      coordCenter: [aData[0], aData[1]],\n      munipalityName: aData[2],\n      zoom: 14,\n      code: aData[3]\n    });\n    this.getWFSData(aData[3])\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        {/* Title */}\n        <div className=\"row m-3\">\n          <div className=\"col-12\">\n            <h1 className=\"text-center\">GeoApp</h1>\n          </div>\n        </div>\n\n        <div className=\"row m-3\">\n          <div className=\"col-sm-4 col-md-2\">\n            {/* Select */}\n            <div className=\"form-group\">\n              <SelectList munipalityChange={this.munipalityChange} />\n            </div>\n          </div>\n          {/* Map */}\n\n          <div className=\"col-sm-8 col-sm-offset-4 col-md-10 col-md-offset-3\">\n            {/* {!isLoaded &&  <h2>  No cargado   </h2>} */}\n            <MapView coordCenter={this.state.coordCenter}\n              zoom={this.state.zoom}\n              geodata={this.state.geodata}\n              code={this.state.code}>\n            </MapView>\n          </div>\n        </div>\n\n        {/* Table */}\n        <div className=\"row m-3\">\n          <div className=\"col\">\n            <table className=\"table table-striped\">\n              <thead>\n                <tr>\n                  <th>ID</th>\n                  <th>Type</th>\n                  <th>Name</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>1</td>\n                  <td>Type 1</td>\n                  <td>Álvaro</td>\n                </tr>\n                <tr>\n                  <td>2</td>\n                  <td>Type 2</td>\n                  <td>name 2</td>\n                </tr>\n                <tr>\n                  <td>3</td>\n                  <td>Type 1</td>\n                  <td>name 3</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport './index.css';\n\nimport App from './App';\n\n\nReactDOM.render(<React.StrictMode >\n    <App/>\n    </React.StrictMode>,document.getElementById('root')\n);"],"sourceRoot":""}